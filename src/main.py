from aiogram import Bot, executor, Dispatcher, types

import keyboards as kb
import tools


config = tools.load_config("config.yml")
bot = Bot(config.Token)
dp = Dispatcher(bot)


@dp.message_handler(commands=["start"])
async def start_command(msg: types.Message):
    await msg.answer(text=config.StartMessage, reply_markup=kb.get_main_keyboard())

@dp.message_handler(text="–ú–æ–¥—É–ª–∏ –∫—É—Ä—Å–∞")
async def module_list(msg: types.Message):
    """–ü—Ä–æ—Å–∏–º –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π"""
    await bot.delete_message(chat_id=msg.chat.id, message_id=msg.message_id)
    await bot.send_message(chat_id=msg.chat.id, text="–ú–æ–¥—É–ª–∏:", reply_markup=kb.get_module_list())

@dp.callback_query_handler(text="back_to_module_list")
async def back_to_module_list(call: types.CallbackQuery):
    """–ü—Ä–æ—Å–∏–º –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π"""
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    await bot.send_message(chat_id=call.message.chat.id, text="–ú–æ–¥—É–ª–∏:", reply_markup=kb.get_module_list())

@dp.callback_query_handler(text_contains="module")
async def select_module(call: types.CallbackQuery):
    """–ü–æ–ø–∞–¥–∞–µ–º —Å—é–¥–∞ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥—É–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π –∫—É—Ä—Å–∞"""
    modules = tools.get_modules()
    selected_module_index = int(call.data.replace("module_", ""))
    module = modules[selected_module_index]

    tools.update_user_history(user_id=call.from_user.id, key="selected_module_id", value=selected_module_index)
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    await bot.send_message(chat_id=call.message.chat.id, text="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥—É–ª—è:", reply_markup=kb.get_module_videos(module))


@dp.callback_query_handler(text_contains="video_")
async def select_video(call: types.CallbackQuery):
    """–ü–æ–ø–∞–¥–∞–µ–º —Å—é–¥–∞ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã–±—Ä–∞–ª–∏ –≤–∏–¥–µ–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–æ—Å–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    current_video_id = int(call.data.replace("video_", ""))
    selected_module_id = tools.get_selected_user_module_id(call.from_user.id)
    await send_lesson(current_video_id, selected_module_id, call.message.chat.id, call.message.message_id, call.from_user.id)    

@dp.callback_query_handler(text="next_video")
async def get_next_video(call: types.CallbackQuery):
    """
    –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –∫–∞–∂–¥—ã–º –≤–∏–¥–µ–æ. –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤ –æ—á–µ—Ä–µ–¥–∏ –≤–∏–¥–µ–æ
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
    modules = tools.get_modules()
    current_module_id = tools.get_current_user_module_id(call.from_user.id)
    current_video_id = tools.get_current_user_video_id(call.from_user.id)
    tools.add_video_to_progress(str(call.from_user.id), str(current_module_id), str(current_video_id))
    current_video_id += 1 # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–∏–¥–µ–æ –Ω–∞ –æ–¥–∏–Ω, —Ç–∫ –Ω–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ –≤–∏–¥–µ–æ –≤ –º–æ–¥—É–ª–µ
    if len(modules[current_module_id].Videos) <= current_video_id:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å
        current_module_id += 1
        current_video_id = 0
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –º–æ–¥—É–ª–∏
        if len(modules) <= current_module_id:
            await check_course_is_over(call.from_user.id, call.message.chat.id)
            return
        else:
            await bot.send_message(chat_id=call.message.chat.id, text=f"–û—Ç–∫—Ä—ã–ª—Å—è –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å: {modules[current_module_id].Title}\n–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!\n\n")


    await send_lesson(current_video_id, current_module_id, call.message.chat.id, call.message.message_id, call.from_user.id)    

@dp.message_handler(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
async def continue_learning(msg: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ, –∑–¥–µ—Å—å –Ω–µ –Ω–∞–¥–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ –∏ –Ω–µ –Ω–∞–¥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –∏–Ω—Ñ—É –≤ –∫—ç—à–µ"""
    current_module_id = tools.get_current_user_module_id(msg.from_user.id)
    current_video_id = tools.get_current_user_video_id(msg.from_user.id)    
    await send_lesson(current_video_id, current_module_id, msg.chat.id, msg.message_id, msg.from_user.id)    

@dp.message_handler(text="–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def my_progress(msg: types.Message):
    text = tools.show_my_progress(str(msg.from_user.id))
    if text:
        await bot.send_message(chat_id=msg.chat.id, text=text, reply_markup=kb.reload_progress())
    else:
        
        await bot.send_message(chat_id=msg.chat.id, text=config.ZeroProgressMessage)

@dp.callback_query_handler(text="reload_progress")
async def reload_progress(call: types.CallbackQuery):
    tools.remove_progress(str(call.from_user.id))
    
    current_module_id = 0
    current_video_id = 0
    await send_lesson(current_video_id, current_module_id, call.message.chat.id, call.message.message_id, call.message.from_user.id)    

    tools.update_user_history(user_id=str(call.from_user.id), key="current_module_id", value=current_module_id)
    tools.update_user_history(user_id=str(call.from_user.id), key="current_video_id", value=current_video_id)

async def send_lesson(current_video_id: int, current_module_id: int, chat_id: int, message_id: int, user_id: int):
    modules = tools.get_modules()
    video = modules[current_module_id].Videos[current_video_id]
    answer_text = "\n".join((
        f"üìï–ú–æ–¥—É–ª—å {current_module_id+1}: ¬´{modules[current_module_id].Title}¬ª",
        f"üìì–£—Ä–æ–∫: {current_video_id+1}/{len(modules[current_module_id].Videos)} - {video.Title}",
        f"üîó–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: {video.Path}"
    ))

    await bot.delete_message(chat_id=chat_id, message_id=message_id)
    await bot.send_message(chat_id=chat_id, text=answer_text, reply_markup=kb.get_next_video()) 

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≤ –∫—ç—à–µ
    tools.update_user_history(user_id=user_id, key="current_module_id", value=current_module_id)
    tools.update_user_history(user_id=user_id, key="current_video_id", value=current_video_id)


# –ü–æ–∫–∞ –∑–∞–º–æ—Ä–æ–∑–∏–ª–∏, —Ç–∫ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ –∫–∞–∂–¥–æ–º—É –≤–∏–¥–æ—Å—É –∫–æ–Ω—Å–ø–µ–∫—Ç—ã –≤—Ä—É—á–Ω—É—é
@dp.callback_query_handler(text="konspect")
async def get_video_text(call: types.CallbackQuery):
    d = open("dofamine.pdf", "rb")
    await bot.send_document(chat_id=call.message.chat.id, document=d) 
    d.close()


@dp.callback_query_handler(text="materials")
async def get_materials(call: types.CallbackQuery):
    current_video = tools.get_current_video(str(call.from_user.id))
    if current_video.Materials:
        materials = "\n".join(f"{i}. <a href='{item.Url}'>{item.Title}</a>" 
                        for i, item in enumerate(current_video.Materials, start=1))
        await bot.send_message(chat_id=call.message.chat.id, text=materials, parse_mode=types.ParseMode.HTML)
    else:
        await bot.send_message(chat_id=call.message.chat.id, text="–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –ø–æ –¥–∞–Ω–Ω–æ–º—É —É—Ä–æ–∫—É –Ω–µ—Ç")


async def check_course_is_over(user_id: int, chat_id: int):
    if tools.course_is_done(str(user_id)):
        await bot.send_message(chat_id=chat_id, text=config.FinishMessage)
        img = open("data/–ø–ª–∞–Ω-–∏—Ç–æ–≥.jpg", mode="rb")
        await bot.send_photo(chat_id=chat_id , photo=img)
        img.close()
    else:
        await bot.send_message(chat_id=chat_id, text=config.CourseNotCompletedMessage)
        

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)